#! /usr/bin/env python3
#-
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2021 Franz Fuchs
# All rights reserved.
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory (Department of Computer Science and
# Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
# DARPA SSITH research programme.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

import yaml
import argparse
from datetime import datetime
import sys

c_bsv_header = """/*-
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory (Department of Computer Science and
 * Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
 * DARPA SSITH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
"""

header_date = "\n// This file was generated by the parse_counters.py script"
header_date += "\n// %s\n\n" % str(datetime.now())

data_t = "Bit#(Report_Width)"

parser = argparse.ArgumentParser(description='''
    Generate source files from a YAML configuration
    ''')

def roundup_power2 (x):
    return 2**(max(0, x-1)).bit_length()

parser.add_argument('-f','--file-path', nargs='?', const="counters.yaml", default=None,
                    help="path to the yaml file")

parser.add_argument('-b','--bsv-output', nargs='?', const="GenerateHPMVector.bsv", default=None,
                    help="generate Bluespec file for defining RISC-V HPM events")

parser.add_argument('-s','--bsv-stat-definitions-output', nargs='?', const="StatCounters.bsv", default=None,
                    help="generate Bluespec file for defining RISC-V HPM events")

parser.add_argument('-c','--c-output', nargs='?', const="counters.h", default=None,
                    help="generate C header file for defining RISC-V HPM events")

args = parser.parse_args()

def genHPMVector(file_path, ofile_name):
    header = c_bsv_header
    header += header_date 
    imp_decl = "import Vector::*;"
    imp_decl += "\nimport StatCounters::*;"
    imp_decl += "\nimport ProcTypes::*;"
    f_end = "\nendfunction"
    struct_acc = ""
    vec_defs = ""
    no_of_ev = 0
    with open(file_path, "r") as yfile, open(ofile_name, "w") as ofile:
        ya = yaml.load(yfile, Loader=yaml.FullLoader)
        vec_list = []
        for k in (ya.keys()):
            start_off = ya[k]["start_off"]
            end_off = ya[k]["end_off"]
            for c in (ya[k]["events"]):
                if(ya[k]["events"][c] + start_off >= end_off):
                    sys.exit("Node has counter numbers out of bounds: " + k)
            vec_list.append(ya[k])
        vec_list.sort(key=lambda x: x["start_off"])
        append_list = []


        for key, item in (ya.items()):
            li = list(item["events"].items())
            li.sort(key=lambda x: x[1])
            if(len(li) == 0):
                sys.exit("length == 0 of " + key)
            offset = item["start_off"]
            no_of_ev = max(item["end_off"], no_of_ev)
            struct_acc += "\n\tif(ev.mab_" + item["struct_name"] + " matches tagged Valid .t) begin"
            for cnt, idx in li:
                struct_acc += "\n\t\tevents[" + str(offset + idx) + "] = t.evt_" + cnt.upper() + ";"
            struct_acc += "\n\tend"



        f_begin = "\n\nfunction Vector#(" + str(no_of_ev) + ", " + data_t + ") generateHPMVector(HPMEvents ev);"
        f_begin += "\n\tVector#(" + str(no_of_ev) + ", " + data_t + ") events = replicate(0);"
        ret = "\n\treturn events;"

        ofile.write(header)
        ofile.write(imp_decl)
        ofile.write(f_begin)
        ofile.write(vec_defs)
        ofile.write(struct_acc)
        ofile.write(ret)
        ofile.write(f_end)


def genStatCounters(file_path, ofile_name):
    header = c_bsv_header
    header += header_date
    imp_decl = "import ProcTypes::*;"
    _ifdef = "\n\n`ifdef PERFORMANCE_MONITORING"
    _endif = "\n`endif"
    struct_decls = ""
    no_of_events_decl = ""
    no_of_ev = 0
    with open(args.file_path, "r") as yfile, open(args.bsv_stat_definitions_output, "w") as ofile:
        ya = yaml.load(yfile, Loader=yaml.FullLoader)

        hpm_events_struct = ""
        if(len(ya) > 0):
            hpm_events_struct += "\n\ntypedef struct {"
        for key, item in (ya.items()):
            li = list(item["events"].items())
            li.sort(key=lambda x: x[1])
            decl = "\n\ntypedef struct {"
            for cnt, idx in li:
                decl += "\n\t" + data_t + " evt_" + cnt.upper() + ";"
            decl += "\n} " + item["struct_name"] + " deriving (Bits, FShow);"
            struct_decls += decl
            hpm_events_struct += "\n\tMaybe#(" + item["struct_name"] + ") mab_" + item["struct_name"] + ";"
            no_of_ev = max(item["end_off"], no_of_ev)
        if(len(ya) > 0):
            hpm_events_struct += "\n} HPMEvents deriving (Bits, FShow);"
        no_of_events_decl += "\ntypedef %d No_Of_Evts;" % (no_of_ev)
        ofile.write(header)
        ofile.write(imp_decl)
        ofile.write(_ifdef)
        ofile.write(no_of_events_decl)
        ofile.write(struct_decls)
        ofile.write(hpm_events_struct);
        ofile.write(_endif)


def genCOutput(file_path, ofile_name):
    header = c_bsv_header
    header += header_date
    with open(file_path, "r") as yfile, open(ofile_name, "w") as ofile:
        ya = yaml.load(yfile, Loader=yaml.FullLoader)
        vec_list = []
        defines = ""
        for key, item in (ya.items()):
            li = list(item["events"].items())
            li.sort(key=lambda x: x[1])
            start_off = item["start_off"]
            defines += "\n\n// " + key.upper()
            for cnt, idx in li:
                defines += "\n#define " + key + "_" + cnt.upper() + " " + str(start_off + idx)


        ofile.write(header)
        ofile.write(defines)

def main():
    # noinspection PyTypeChecker

    parser = argparse.ArgumentParser(description='''
        Generate source files from a YAML configuration
        ''')

    parser.add_argument('-f','--file-path', nargs='?', const="counters.yaml", default=None,
                        help="path to the yaml file")
    
    parser.add_argument('-b','--bsv-output', nargs='?', const="GenerateHPMVector.bsv", default=None,
                        help="generate Bluespec file for defining RISC-V HPM events")
    
    parser.add_argument('-s','--bsv-stat-definitions-output', nargs='?', const="StatCounters.bsv", default=None,
                        help="generate Bluespec file for defining RISC-V HPM events")
    
    parser.add_argument('-c','--c-output', nargs='?', const="counters.h", default=None,
                        help="generate C header file for defining RISC-V HPM events")
    
    args = parser.parse_args()

    file_path = args.file_path

    if args.c_output:
        genCOutput(file_path, args.c_output)

    if args.bsv_output:
        genHPMVector(file_path, args.bsv_output)

    if args.bsv_stat_definitions_output:
        genStatCounters(file_path, args.bsv_stat_definitions_output)


if __name__ == "__main__":
    main()
