#! /usr/bin/env python3
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Copyright (c) 2021 Franz Fuchs
# All rights reserved.
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory (Department of Computer Science and
# Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
# DARPA SSITH research programme.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

import yaml
import argparse
from datetime import datetime

c_bsv_header = """/*-
 * SPDX-License-Identifier: BSD-2-Clause
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory (Department of Computer Science and
 * Technology) under DARPA contract HR0011-18-C-0016 ("ECATS"), as part of the
 * DARPA SSITH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
"""

header_date = "\n// This file was generated by the parse_counters.py script"
header_date += "\n// %s\n\n" % str(datetime.now())

data_t = "Bit#(Report_Width)"

parser = argparse.ArgumentParser(description='''
    Generate source files from a YAML configuration
    ''')


class Event():
    def __init__(self, name, offset):
        super().__init__()
        self.name = name
        self.offset = offset


class EventSet():
    def __init__(self, name, config):
        super().__init__()
        self.name = name
        self.struct_name = config["struct_name"]
        self.start = config["start_off"]
        self.end = config["end_off"]
        events = []
        for event, offset in config["events"].items():
            if offset not in range(0, self.end - self.start):
                raise ValueError(name + " event " + event + " - out of bounds")
            events.append(Event(event, offset))
        events.sort(key=lambda event: event.offset)
        if not events:
            raise ValueError(name + " has no events defined")
        self.events = events


class EventsConfig():
    def __init__(self, config):
        super().__init__()
        sets = []
        for name, eventset in config:
            sets.append(EventSet(name, eventset))
        if not sets:
            raise ValueError("no event sets defined")
        sets.sort(key=lambda eventset: eventset.start)
        prev_end = -1
        for eventset in sets:
            if eventset.start <= prev_end:
                raise ValueError(eventset.name +
                                 " overlaps with previous event set")
        self.eventsets = sets
        self.start = sets[0].start
        self.end = sets[-1].end


def load_config(filename):
    with open(filename, "r") as f:
        ya = yaml.load(f, Loader=yaml.FullLoader)
        return EventsConfig(ya.items())


def genHPMVector(config, filename, imports):
    header = c_bsv_header
    header += header_date
    imp_decl = "import Vector::*;"
    imp_decl += "\nimport StatCounters::*;"
    imp_decl += imports
    f_end = "\nendfunction"
    struct_acc = ""
    vec_defs = ""

    with open(filename, "w") as f:
        for eventset in config.eventsets:
            struct_acc += "\n\tif(ev.mab_" + eventset.struct_name + \
                " matches tagged Valid .t) begin"
            for event in eventset.events:
                struct_acc += "\n\t\tevents[" + \
                    str(eventset.start + event.offset) + \
                    "] = t.evt_" + event.name.upper() + ";"
            struct_acc += "\n\tend"

        f_begin = "\n\nfunction Vector#(" + str(config.end) + ", " + data_t + \
            ") generateHPMVector(HPMEvents ev);"
        f_begin += "\n\tVector#(" + str(config.end) + ", " + data_t + \
            ") events = replicate(0);"
        ret = "\n\treturn events;"

        f.write(header)
        f.write(imp_decl)
        f.write(f_begin)
        f.write(vec_defs)
        f.write(struct_acc)
        f.write(ret)
        f.write(f_end)


def genStatCounters(config, filename, imports):
    header = c_bsv_header
    header += header_date
    imp_decl = imports
    struct_decls = ""
    no_of_events_decl = ""
    with open(filename, "w") as f:
        hpm_events_struct = "\n\ntypedef struct {"
        for eventset in config.eventsets:
            decl = "\n\ntypedef struct {"
            for event in eventset.events:
                decl += "\n\t" + data_t + " evt_" + event.name.upper() + ";"
            decl += "\n} " + eventset.struct_name + " deriving (Bits, FShow);"
            struct_decls += decl
            hpm_events_struct += "\n\tMaybe#(" + eventset.struct_name + \
                ") mab_" + eventset.struct_name + ";"
        hpm_events_struct += "\n} HPMEvents deriving (Bits, FShow);"
        no_of_events_decl += "\ntypedef %d No_Of_Evts;" % (config.end)
        f.write(header)
        f.write(imp_decl)
        f.write(no_of_events_decl)
        f.write(struct_decls)
        f.write(hpm_events_struct)


def genCOutput(config, filename):
    header = c_bsv_header
    header += header_date
    with open(filename, "w") as f:
        defines = ""
        for eventset in config.eventsets:
            defines += "\n\n// " + eventset.name.upper()
            for event in eventset.events:
                defines += "\n#define " + eventset.name + "_" + \
                    event.name.upper() + " " + \
                    str(eventset.start + event.offset)

        f.write(header)
        f.write(defines)


def main():
    parser = argparse.ArgumentParser(description='''
        Generate RISC-V HPM events source files from a YAML configuration
        ''')

    parser.add_argument('config', type=str, help="path to the YAML file")

    parser.add_argument('impl', choices=['Flute', 'Toooba'],
                        help="implementation to generate code for")

    parser.add_argument('-b', '--bsv-output', nargs='?', metavar='file',
                        const="GenerateHPMVector.bsv", default=None,
                        help="output BSV struct to bit vector converter")

    parser.add_argument('-s', '--bsv-stat-definitions-output', nargs='?',
                        metavar='file', const="StatCounters.bsv", default=None,
                        help="output BSV struct definition")

    parser.add_argument('-c', '--c-output', nargs='?', metavar='file',
                        const="counters.h", default=None,
                        help="output C header with event numbers")

    args = parser.parse_args()

    config = load_config(args.config)

    imports = ""
    if args.impl == 'Flute':
        imports = "\nimport ISA_Decls::*;"
    elif args.impl == 'Toooba':
        imports = "\nimport ProcTypes::*;"

    if args.c_output:
        genCOutput(config, args.c_output)

    if args.bsv_output:
        genHPMVector(config, args.bsv_output, imports)

    if args.bsv_stat_definitions_output:
        genStatCounters(config, args.bsv_stat_definitions_output, imports)


if __name__ == "__main__":
    main()
